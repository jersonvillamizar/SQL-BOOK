-- SQLBook: Code
CREATE DATABASE IF NOT EXISTS ProyectoFiltro;
USE ProyectoFiltro;

DROP TABLE IF EXISTS `Aprendices`;
DROP TABLE IF EXISTS `Matriculas`;
DROP TABLE IF EXISTS `Rutas`;
DROP TABLE IF EXISTS `Carreras`;
DROP TABLE IF EXISTS `Cursos`;
DROP TABLE IF EXISTS `Instructores`;

CREATE TABLE IF NOT EXISTS `Instructores`(
    `id_instructor` INT AUTO_INCREMENT PRIMARY KEY,
    `nombre_instructor` VARCHAR(255) NOT NULL,
    `especialidad` VARCHAR(255) NOT NULL
) AUTO_INCREMENT=1;
CREATE TABLE IF NOT EXISTS `Carreras`(
    `id_carrera` INT AUTO_INCREMENT PRIMARY KEY,
    `carrera` VARCHAR(255) NOT NULL
)AUTO_INCREMENT=1;
CREATE TABLE IF NOT EXISTS `Rutas`(
    `id_ruta` INT AUTO_INCREMENT PRIMARY KEY,
    `nombre_ruta` VARCHAR(255) NOT NULL,
    `id_carrera` INT,
    FOREIGN KEY(`id_carrera`) REFERENCES `Carreras`(`id_carrera`)
)AUTO_INCREMENT=1;
CREATE TABLE IF NOT EXISTS `Cursos`(
    `id_curso` INT AUTO_INCREMENT PRIMARY KEY,
    `nombre_curso` VARCHAR(255) NOT NULL,
    `id_instructor` INT,
    FOREIGN KEY(`id_instructor`) REFERENCES `Instructores`(`id_instructor`)
)AUTO_INCREMENT=1;
CREATE TABLE IF NOT EXISTS `Aprendices`(
    `id_aprendiz` INT AUTO_INCREMENT PRIMARY KEY,
    `nombre` VARCHAR(255) NOT NULL,
    `apellido` VARCHAR(255) NOT NULL,
    `id_ruta` INT,
    FOREIGN KEY(`id_ruta`) REFERENCES `Rutas`(`id_ruta`)
)AUTO_INCREMENT=1;
CREATE TABLE IF NOT EXISTS `Cursos_Por_Ruta`(
    id_curso_por_ruta INT AUTO_INCREMENT PRIMARY KEY,
    id_ruta INT,
    id_curso INT,
    FOREIGN KEY(`id_curso`) REFERENCES `Cursos`(`id_curso`),
    FOREIGN KEY(`id_ruta`) REFERENCES `Rutas`(`id_ruta`)
)AUTO_INCREMENT=1;

CREATE TABLE IF NOT EXISTS `Cursos_Por_Aprendiz`(
    id_curso_por_aprendiz INT AUTO_INCREMENT PRIMARY KEY,
    id_aprendiz INT,
    id_curso_por_ruta INT,
    FOREIGN KEY(`id_aprendiz`) REFERENCES `Aprendices`(`id_aprendiz`),
    FOREIGN KEY(`id_curso_por_ruta`) REFERENCES `Cursos_Por_Ruta`(`id_curso_por_ruta`)
)AUTO_INCREMENT=1;

CREATE TABLE IF NOT EXISTS `aprendiz_ruta_curso`(
    id_aprendiz INT,
    id_ruta INT,
    id_curso INT,
    FOREIGN KEY(`id_aprendiz`) REFERENCES `Aprendices`(`id_aprendiz`),
    FOREIGN KEY(`id_ruta`) REFERENCES `Rutas`(`id_ruta`),
    FOREIGN KEY(`id_curso`) REFERENCES `Cursos`(`id_curso`)
)AUTO_INCREMENT=1;

INSERT INTO aprendiz_ruta_curso (id_aprendiz, id_ruta, id_curso) VALUES
(1, 3, 17),
(1, 3, 4),
(1, 3, 3),
(2, 11, 13),
(2, 11, 11),
(3, 1, 2),
(3, 1, 18),
(3, 1, 17),
(3, 1, 3),
(4, 10, 14),
(4, 10, 11),
(5, 4, 5),
(5, 4, 19),
(5, 4, 20),
(6, 5, 5),
(6, 5, 19),
(6, 5, 20),
(7, 5, 5),
(7, 5, 19),
(8, 2, 2),
(8, 2, 1),
(8, 2, 3),
(9, 1, 2),
(9, 1, 4),
(9, 1, 1),
(9, 1, 3),
(10, 4, 5),
(10, 4, 19),
(10, 4, 20),
(11, 2, 2),
(11, 2, 4),
(11, 2, 1);

SELECT arc.id_aprendiz, cr.id_curso_por_ruta FROM
aprendiz_ruta_curso arc
JOIN Cursos_Por_Ruta cr 
ON arc.id_ruta = cr.id_ruta AND arc.id_curso = cr.id_curso
ORDER BY id_aprendiz;

-- CREATE TABLE Cursos_Por_Aprendiz
-- SELECT arc.id_aprendiz, cr.id_curso_por_ruta 
-- FROM aprendiz_ruta_curso arc
-- JOIN Cursos_Por_Ruta cr ON arc.id_ruta = cr.id_ruta AND arc.id_curso = cr.id_curso
-- ORDER BY id_aprendiz;

INSERT INTO Cursos_Por_Aprendiz (id_aprendiz, id_curso_por_ruta)
SELECT arc.id_aprendiz, cr.id_curso_por_ruta 
FROM aprendiz_ruta_curso arc
JOIN Cursos_Por_Ruta cr ON arc.id_ruta = cr.id_ruta AND arc.id_curso = cr.id_curso
ORDER BY id_aprendiz;

INSERT INTO Instructores (id_instructor, nombre_instructor, especialidad)
VALUES
(1, 'Ricardo Vicente Jaimes', 'Sistemas'),
(2, 'Marinela Narvaez', 'Salud Ocupacional'),
(3, 'Agustin Parra Granados', 'Soldadura'),
(4, 'Nelson Raul Buitrago', 'Mecanica'),
(5, 'Roy Hernando Llamas', 'Ingles'),
(6, 'Maria Jimena Monsalve', 'Electronica'),
(7, 'Juan Carlos Cobos', 'Electronica'),
(8, 'Pedro Nell Santamaria', 'Sistemas'),
(9, 'Andrea Gonzalez', 'Sistemas'),
(10, 'Marisela Sevilla', 'Salud Ocupacional');

INSERT INTO Carreras (id_carrera, carrera)
VALUES
(1, 'Desarrollo de Software'),
(2, 'Electronica'),
(3, 'Mecanica Automotriz'),
(4, 'Seguridad y Salud Ocupacional'),
(5, 'Soldadura');

INSERT INTO Rutas (id_ruta, nombre_ruta, id_carrera)
VALUES
(1, 'Sistemas de Informacion Empresariales', 1),
(2, 'Videojuegos', 1),
(3, 'Machine Learning', 1),
(4, 'Microcontroladores', 2),
(5, 'Robotica', 2),
(6, 'Dispositivos Bio-medicos', NULL),
(7, 'Motores Hibridos', NULL),
(8, 'Vehiculos de Uso Agricola', NULL),
(9, 'Sistemas de Gestion en Seguridad Ocupacional', NULL),
(10, 'Soldadura Autogena Industrial', 5),
(11, 'Soldadura Electrica Industrial', 5),
(12, 'Soldadura Submarina', NULL);

INSERT INTO Cursos (id_curso, nombre_curso, id_instructor)
VALUES
(1, 'Matematicas Basicas', 4),
(2, 'Algebra Computacional', 1),
(3, 'Programacion Basica', 3),
(4, 'Ingles', 5),
(5, 'Electronica Basica', 7),
(6, 'Motor de Cuatro Tiempos', NULL),
(7, 'Enfermedades Laborales', NULL),
(8, 'Higiene Postural en el Trabajo', NULL),
(9, 'Ergonomia', NULL),
(10, 'Legislacion Laboral en Colombia', NULL),
(11, 'Materiales de Soldadura', 3),
(12, 'Metodos de Soldadura', NULL),
(13, 'Fusion de Metales', 3),
(14, 'Buceo 1', NULL),
(15, 'Buceo 2', NULL),
(16, 'Riesgo Electrico', NULL),
(17, 'Bases de Datos Relacionales', 2),
(18, 'Bases de Datos NO Relacionales', 2),
(19, 'Electronica Digital', 6),
(20, 'Microprocesadores', 7);

INSERT INTO `Cursos_Por_Ruta` (id_ruta, id_curso)
VALUES
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4),
    (1, 17),
    (1, 18),
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),
    (3, 3),
    (3, 4),
    (3, 17),
    (4, 5),
    (4, 19),
    (4, 20),
    (5, 5),
    (5, 19),
    (5, 20),
    (10, 11),
    (10, 14),
    (11, 11),
    (11, 13);

SELECT * FROM `Cursos_Por_Ruta`;

INSERT INTO `Aprendices` (nombre, apellido, id_ruta)
VALUES
    ('Ana María', 'Velázquez Parra', 3),
    ('Gustavo', 'Noriega Alzate', 4),
    ('Pedro Nell', 'Gómez Díaz', 4),
    ('Jairo Augusto', 'Castro Camargo', 5),
    ('Henry', 'Soler Vega', 5),
    ('Carlos Saúl', 'Gómez', 1),
    ('Leyla María', 'Delgado Vargas', 1),
    ('Daniel Simancas', 'Junior', 10),
    ('Antonio', 'Cañate Cortés', 11),
    ('Juan José', 'Cardona', 2),
    ('Sergio Augusto', 'Contreras Navas', 2);

SELECT * FROM `Aprendices`;
SET @row_number = 0;
UPDATE `Aprendices` 
SET `id_aprendiz` = (@row_number:=@row_number + 1)
ORDER BY `nombre`;

INSERT INTO Cursos_Por_Aprendiz (id_aprendiz, id_curso)
VALUES
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4),
    (1, 17),
    (1, 18),
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),
    (3, 3),
    (3, 4),
    (3, 17),
    (4, 5),
    (4, 19),
    (4, 20),
    (5, 5),
    (5, 19);

    SELECT * FROm aprendices;


/* 1 Agregue un campo Estado_Matrícula a la tabla Matrícula que indique si el
estudiante se encuentra “En Ejecución”, “Terminado” o “Cancelado” */

CREATE TABLE IF NOT EXISTS `Matriculas`(
    `id_matricula` INT PRIMARY KEY AUTO_INCREMENT,
    `id_aprendiz` INT,
    FOREIGN KEY (`id_aprendiz`) REFERENCES `Aprendices`(`id_aprendiz`)
)AUTO_INCREMENT=1;
ALTER TABLE `Matriculas`ADD `estado` VARCHAR(45) NOT NULL AFTER `id_matricula`;

-- Insertar datos en la tabla Matriculas
-- Insertar datos en la tabla Matriculas
INSERT INTO `Matriculas` (`id_aprendiz`, `estado`)
VALUES
    (1, 'Activo'),
    (2, 'Terminado'),
    (3, 'Activo'),
    (4, 'Terminado'),
    (5, 'Terminado'),
    (6, 'Cancelado'),
    (7, 'Terminado'),
    (8, 'Cancelado'),
    (9, 'Activo'),
    (10, 'Terminado'),
    (11, 'Activo');


SELECT * FROM `matriculas`;
SET @row_number = 0;
UPDATE `matriculas` 
SET `id_matricula` = (@row_number:=@row_number + 1)
ORDER BY `estado`;

/* 2 Agregue a el campo edad a la tabla de Aprendices.
 */

ALTER TABLE `Aprendices` ADD `edad` VARCHAR(3) AFTER `apellido`;

-- Poblar la tabla de edad con datos 
UPDATE `Aprendices`
SET `edad` = FLOOR(RAND()*(50-15+1)+15)
WHERE `edad` IS NULL;

/* 3  Si suponemos que los cursos tienen una duración diferente
dependiendo de la ruta que lo contenga ¿qué modificación haría a la
estructura de datos ya planteada? */

ALTER TABLE `Cursos_Por_Ruta` ADD `duracion` INT NOT NULL DEFAULT 6 AFTER `id_curso_por_ruta`;
-- ALTER TABLE `Cursos` ALTER COLUMN `duracion` SET DEFAULT 6;

/* 4 Seleccionar los nombres y edades de aprendices que están cursando la
carrera de electrónica. */

SELECT a.nombre AS Nombre, a.apellido AS Apellido, a.edad AS Edad,
c.carrera AS Carrera, m.estado AS Estado
FROM Matriculas m 
JOIN Aprendices a ON m.id_aprendiz = a.id_aprendiz
JOIN Rutas r ON r.id_ruta = a.id_ruta
JOIN Carreras c ON c.id_carrera = r.id_carrera
WHERE c.carrera = 'Electronica';

-- 5 Seleccionar Nombres de Aprendices junto al nombre de la ruta de
-- aprendizaje que cancelaron.

SELECT a.nombre AS Nombre, a.apellido AS Apellido, r.nombre_ruta AS Ruta, 
m.estado AS Estado
FROM Matriculas m 
JOIN Aprendices a ON m.id_aprendiz = a.id_aprendiz
JOIN Rutas r ON r.id_ruta = a.id_ruta
WHERE m.estado = 'Cancelado';

SELECT * FROM `aprendices`;

-- 6 Seleccionar Nombre de los cursos que no tienen un instructor asignado.

SELECT * FROM Cursos;

SELECT nombre_curso AS Cursos, id_instructor AS Instructores
FROM Cursos
WHERE id_instructor IS NULL;

-- 7 Seleccionar Nombres de los instructores que dictan cursos en la ruta de
-- aprendizaje “Sistemas de Información Empresariales”.

SELECT DISTINCT i.nombre_instructor AS Nombre_Instructor, r.nombre_ruta AS Ruta
FROM Instructores i
JOIN Cursos c ON i.id_instructor = c.id_instructor
JOIN Cursos_Por_Ruta cr ON cr.id_curso = c.id_curso
JOIN Rutas r ON r.id_ruta = cr.id_ruta
WHERE r.nombre_ruta = 'Sistemas de Informacion Empresariales';

-- 8 Genere un listado de todos los aprendices que terminaron una Carrera
-- mostrando el nombre del profesional, el nombre de la carrera y el
-- énfasis de la carrera (Nombre de la Ruta de aprendizaje)

SELECT a.nombre AS Nombre, a.apellido AS Apellido, r.nombre_ruta AS Ruta, 
c.carrera AS Carrera
FROM Matriculas m 
JOIN Aprendices a ON m.id_aprendiz = a.id_aprendiz
JOIN Rutas r ON r.id_ruta = a.id_ruta
JOIN Carreras c ON c.id_carrera = r.id_carrera
WHERE m.estado = 'Terminado';

-- 9 Genere un listado de los aprendices matriculados en el 
-- curso “Bases de Datos Relacionales”.

SELECT a.nombre, a.apellido, c.nombre_curso
FROM Matriculas m 
JOIN Aprendices a ON m.id_aprendiz = a.id_aprendiz
JOIN Cursos_Por_Aprendiz ca ON ca.id_aprendiz = a.id_aprendiz
JOIN Cursos_Por_Ruta cr ON cr.id_curso_por_ruta = ca.id_curso_por_ruta
JOIN Cursos c ON c.id_curso = cr.id_curso
WHERE c.nombre_curso = 'Bases de Datos Relacionales' AND m.estado = "Activo";

-- 10. Nombres de Instructores que no tienen curso asignado.

SELECt DISTINCT i.nombre_instructor, c.id_instructor
FROM Instructores i
LEFT JOIN Cursos c ON c.id_instructor = i.id_instructor
WHERE c.id_instructor IS NULL;
